<h1 class="text-center">INVESTMENT PROPERTY</h1>

<div class="property-info" data-controller="appointment-alert">
  <%= simple_form_for [@rate, @mortgage], html: {"data-appointment-alert-target": "mortgageForm"} do |f| %>
  <div class="loan-info">

    <div class="field">
      <%= f.label :property_value %>
      <%= f.number_field :property_value, id: 'property_value', data: {"appointment-alert-target": "propertyValue"} %>
    </div>

    <div class="field">
      <%= f.label :total_equity %>
      <%= f.number_field :total_equity, id: 'total_equity', data: {"appointment-alert-target": "totalEquity"} %>
    </div>

    <div class="field field-interest-rate">
      <div class="interest-title">
        <p>Interest Rate</p>
      </div>
      <div class="interest-value">
        <p><%= number_to_percentage(@rate.interest_value, precision: 2) %></p>
      </div>
      <%= f.input :interest_rate, :as => :hidden, :input_html => {:value => @rate.interest_value} %>
    </div>

  </div>

  <div class="rental-info">
    <div class="field">
      <%= f.label :rental_income %>
      <%= f.number_field :rental_income, id: 'rental_income', data: {"appointment-alert-target": "rentalIncome"} %>
    </div>

    <div class="field">
      <%= f.label :maintenance_fund %>
      <%= f.number_field :maintenance_fund, id: 'maintenance_fund', data: {"appointment-alert-target": "maintenanceFund"} %>
    </div>

    <div class="field">
      <%= f.label :other_expenses %>
      <%= f.number_field :other_expenses, id: 'other_expenses', data: {"appointment-alert-target": "otherExpenses"} %>
    </div>
  </div>

    <div class="field-submit">
      <%= f.submit "Calculate Cashflow", class:"btn btn-primary", data: { action: 'click->appointment-alert#mortgageFormFire' } %>
    </div>
  <% end %>
</div>


<!-- JavaScript to dynamically calculate the loan amount and monthly repayment -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  var calculateCashflowButton = document.querySelector('input[type="submit"][value="Calculate Cashflow"]');
  var propertyValueField = document.getElementById('property_value');
  var totalEquityField = document.getElementById('total_equity');
  var interestRateField = document.getElementById('interest_rate');
  var rentalIncomeField = document.getElementById('rental_income');
  var maintenanceFundField = document.getElementById('maintenance_fund');
  var otherExpensesField = document.getElementById('other_expenses');
  var loanAmountField = document.getElementById('mortgage_loan_amount');
  var monthlyRepaymentField = document.getElementById('monthly_repayment_amount');
  var monthlyCashflowField = document.getElementById('monthly_cashflow_amount');

  calculateCashflowButton.addEventListener('click', function(event) {
    console.log("Calculate Cashflow button clicked");

    // Retrieve input values
    var propertyValue = parseFloat(propertyValueField.value);
    var totalEquity = parseFloat(totalEquityField.value);
    var interestRate = parseFloat(interestRateField.value);
    var rentalIncome = parseFloat(rentalIncomeField.value);
    var maintenanceFund = parseFloat(maintenanceFundField.value);
    var otherExpenses = parseFloat(otherExpensesField.value);

    // Calculate loan amount
    var loanAmount = propertyValue - totalEquity;
    loanAmountField.value = loanAmount.toFixed(2);

    // Calculate monthly repayment
    var monthlyInterestRate = interestRate / 100 / 12;
    var loanTermInMonths = 30 * 12; // Assuming a 30-year loan term
    var monthlyRepayment = (loanAmount * monthlyInterestRate) / (1 - Math.pow(1 + monthlyInterestRate, -loanTermInMonths));
    monthlyRepaymentField.value = monthlyRepayment.toFixed(2);

    // Calculate monthly cashflow
    var monthlyCashflow = rentalIncome - maintenanceFund - otherExpenses - monthlyRepayment;
    monthlyCashflowField.value = monthlyCashflow.toFixed(2);
  });
});

document.addEventListener('DOMContentLoaded', function() {
  // Retrieve all input fields that need formatting
  var inputFields = document.querySelectorAll('input[type="number"]');

  // Loop through each input field
  inputFields.forEach(function(inputField) {
    // Add event listener to format value when input field is focused out
    inputField.addEventListener('blur', function() {
      // Parse the input value to a number
      var value = parseFloat(inputField.value.replace(/,/g, '')); // Remove commas before parsing
      // If the value is not NaN, format it with commas and update the input value
      if (!isNaN(value)) {
        inputField.value = value.toLocaleString('en-US', { maximumFractionDigits: 2 });
      }
    });

    // Add event listener to remove commas when input field is focused
    inputField.addEventListener('focus', function() {
      // Remove commas from the input value
      inputField.value = inputField.value.replace(/,/g, '');
    });
  });
});

</script>

<br>
